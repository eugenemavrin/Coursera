#include <iostream>
#include <fstream>
#include <stdexcept>
#include <vector>

using namespace std;
class Matrix {
public:
	Matrix(){
		_num_rows = 0;
		_num_cols = 0;
		vector<vector<int> > s(0, vector<int>(0, 0));
		_matrix = s;

	}
	Matrix(const int& rows, const int& cols) {
		if (rows < 0 || cols < 0) {
			throw out_of_range("");
		}
		else {
			_num_rows = rows;
			_num_cols = cols;
			vector<vector<int> > s(rows, vector<int>(cols, 0));
			_matrix = s;
		}
	}
	void Reset(const int& rows, const int& cols) {
		if (rows < 0 || cols < 0) {
			throw out_of_range("");
		}
		else {
			_num_rows = rows;
			_num_cols = cols;
			vector<vector<int> > s(rows, vector<int>(cols, 0));
			_matrix = s;
		}
	}
	int At(const int& rows, const int& cols) const {
		if (rows < 0 || cols < 0 || rows > _num_rows|| cols > _num_cols) {
					throw out_of_range("");
		}
		else {
			return _matrix[rows][cols];
		}
	}
	int& At(const int& rows, const int& cols)  {
		if (rows < 0 || cols < 0 || rows > _num_rows || cols > _num_cols) {
					throw out_of_range("");
		}
		else {
			return _matrix[rows][cols];
		}
	}
	int GetNumRows() {
		return _num_rows;
	}
	int GetNumColumns() {
		return _num_cols;
	}

private:
	int _num_rows;
	int _num_cols;
	vector<vector<int> > _matrix;

};
istream& operator>>(istream& stream, Matrix& m) {
		int row, col, buf;
		stream >> row >> col;
		cout << col << endl << row << endl;
		m.Reset(row, col);
		for (int i = 0; i < row; ++i) {
			for (int j = 0; j < col; ++j) {
				stream >> buf;
				m.At(i, j) = buf;
			}
		}
	return stream;
}
ostream& operator<<(ostream& stream, Matrix m) {
	stream << m.GetNumRows() << " " << m.GetNumColumns() << endl;
	for(int i = 0; i < m.GetNumRows(); ++i) {
		for (int j = 0; j < m.GetNumColumns(); j++) {
			stream << m.At(i, j) << " ";
		}
		stream << endl;
	}

	return stream;
}
Matrix operator+(Matrix one, Matrix two) {
		Matrix res(one.GetNumRows(), one.GetNumColumns());
		for(int i = 0; i < one.GetNumRows(); ++i) {
			for (int j = 0; j < one.GetNumColumns(); j++) {
				res.At(i, j) = one.At(i, j) + two.At(i, j);
			}
		}
	return res;
}
bool operator==(Matrix one, Matrix two) {
	if (one.GetNumColumns() != two.GetNumColumns() || one.GetNumRows() != two.GetNumRows()) {
		return false;
	}
	else {
		for(int i = 0; i < one.GetNumRows(); ++i) {
			for (int j = 0; j < one.GetNumColumns(); j++) {
				if(one.At(i, j) != two.At(i, j)) {
					return false;
				}
			}
		}
	}
	return true;
}

int main() {
	Matrix one;
	Matrix two;

	cin >> one >> two;
	cout << one + two << endl;
	return 0;
}
