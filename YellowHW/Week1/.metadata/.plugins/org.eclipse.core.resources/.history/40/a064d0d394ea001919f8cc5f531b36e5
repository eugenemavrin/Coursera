//============================================================================
// Name        : find_max_repetition_count.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <map>
#include <cstdint>
#include <vector>
#include <tuple>

using namespace std;

enum class Lang {
  DE, FR, IT
};


struct Region {
  string std_name;
  string parent_std_name;
  map<Lang, string> names;
  int64_t population;
};

bool operator==(const Region& region1, const Region& region2) {
	return tie(region1.std_name, region1.parent_std_name, region1.population, region1.names) ==
			tie(region2.std_name, region2.parent_std_name, region2.population, region2.names);
}
int FindMaxRepetitionCount(const vector<Region>& regions) {
	map<Region, int> reg_count;
	for (Region r : regions) {
		if (reg_count.count(r) > 1) {
			reg_count[r] += 1;
		}
		else reg_count[r] = 1;
	}
	int max = 0;
	for(auto rg : reg_count) {
		if (rg.second > max) {
			max = rg.second;
		}
	}
	return max;
}
/*
int FindMaxRepetitionCount(const vector<Region>& regions) {
	int max = 0;
	for (uint i = 0; i < regions.size(); i++) {
		int count = 0;
		for (const Region& r : regions) {
			if(regions[i] == r) {
				count++;
			}
		}
		if (count > max) {
			max = count;
		}
	}

	return max;
}
*/

int main() {
	vector<Region> t1;
	t1 =  {
		      {
		          "Moscow",
		          "Russia",
		          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
		          89
		      }, {
		          "Russia",
		          "Eurasia",
		          {{Lang::DE, "Russland"}, {Lang::FR, "Russie"}, {Lang::IT, "Russia"}},
		          89
		      }, {
		          "Moscow",
		          "Russia",
		          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
		          89
		      }, {
		          "Moscow",
		          "Russia",
		          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
		          89
		      }, {
		          "Russia",
		          "Eurasia",
		          {{Lang::DE, "Russland"}, {Lang::FR, "Russie"}, {Lang::IT, "Russia"}},
		          89
		      },
		  };

  cout << FindMaxRepetitionCount(t1) << endl;

  vector<Region> t2;

  t2 = {
	      {
	          "Moscow",
	          "Russia",
	          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
	          89
	      }, {
	          "Russia",
	          "Eurasia",
	          {{Lang::DE, "Russland"}, {Lang::FR, "Russie"}, {Lang::IT, "Russia"}},
	          89
	      }, {
	          "Moscow",
	          "Russia",
	          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou deux"}, {Lang::IT, "Mosca"}},
	          89
	      }, {
	          "Moscow",
	          "Toulouse",
	          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
	          89
	      }, {
	          "Moscow",
	          "Russia",
	          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
	          31
	      },
	  };

  cout << FindMaxRepetitionCount(t2) << endl;

  return 0;
}

