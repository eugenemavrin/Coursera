#include <iostream>
#include <vector>
using namespace std;

class FunctionPart {
public:
	FunctionPart(const char& c, const double x) {
		_operand = c;
		_x = x;
	}
	char Operand() const {
		return _operand;
	}
	double Value() const {
		return _x;
	}
private:
	char _operand;
	double _x;
};

class Function {
public:
	Function() {};
	void AddPart (const char& c, const double x) {
		_operations.push_back(FunctionPart(c, x));
	}
	double Apply(double y) {
		for (auto& o : _operations) {
			if (o.Operand() == '+') {
				y += o.Value();
			}
			else y-= o.Value();
		}
		return y;
	}
	void Invert() {
		for (auto & o : _operations) {
			if (o.Operand() == '+') {
				o = FunctionPart('-', o.Value());
			}
			else o = FunctionPart('+', o.Value());
		}
		reverse(_operations.begin(), _operations.end());
	}

private:
	vector<FunctionPart> _operations;
};


