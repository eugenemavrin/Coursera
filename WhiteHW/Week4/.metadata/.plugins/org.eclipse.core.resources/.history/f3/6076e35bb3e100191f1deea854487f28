#include <iostream>
#include <vector>
using namespace std;

struct Image {
  double quality;
  double freshness;
  double rating;
};

struct Params {
  double a;
  double b;
  double c;
};

class FunctionPart {
public:
	FunctionPart(const char& c, const double x) {
		_operand = c;
		_x = x;
	}
	char Operand() {
		return _operand;
	}
	double Value() {
		return _x;
	}
private:
	char _operand;
	double _x;
};

class Function {
public:
	Function() {};
	void AddPart (const char& c, const double x) {
		_operations.push_back(FunctionPart(c, x));
	}
	double Apply(double y) {
		for (auto& o : _operations) {
			if (o.Operand() == '+') {
				y += o.Value();
			}
			else y-= o.Value();
		}
		return y;
	}
	void Invert() {
		for (auto & o : _operations) {
			if (o.Operand() == '+') {
				o = Function('-', o.Value());
			}
			else o.Operand() = '+';
		}
	}

private:
	vector<FunctionPart> _operations;
};

Function MakeWeightFunction(const Params& params,
                            const Image& image) {
  Function function;
  function.AddPart('-', image.freshness * params.a + params.b);
  function.AddPart('+', image.rating * params.c);
  return function;
}

double ComputeImageWeight(const Params& params, const Image& image) {
  Function function = MakeWeightFunction(params, image);
  return function.Apply(image.quality);
}

double ComputeQualityByWeight(const Params& params,
                              const Image& image,
                              double weight) {
  Function function = MakeWeightFunction(params, image);
  function.Invert();
  return function.Apply(weight);
}

int main() {
  Image image = {10, 2, 6};
  Params params = {4, 2, 6};
  cout << ComputeImageWeight(params, image) << endl;
  cout << ComputeQualityByWeight(params, image, 46) << endl;
  return 0;
}
