#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cctype>
#include <map>
using namespace std;

class Solution {
public:
	Solution() {}

	Solution(const string& p, const string& b) {
		words = parse(p);
		banned = parse(b);
		erased = eraser();
	}
	vector<string> Vector2Map(const vector<string>& v) {
		map<int, vector<string>> vec2map;
		vector<string> res;
		int counter = 0;
		for (const auto& s : v) {
			vec2map[count(v.begin(), v.end(), s)].push_back(s);
		}
		for (auto& l : vec2map) {
			for (auto& s : l.second) {
				if (counter < 3) +{
					res.push_back(s);
					counter++;
				}
			}
		}
		return res;
	}
	vector<string> GetVectorOfParagraphWords() const {
		return words;
	}
	vector<string> GetVectorOfBannedWords() const {
		return banned;
	}
	vector<string> GetErased() const {
		return erased;
	}
private:
	string paragraph;
	string banned_line;
	vector <string> erased;
	vector <string> banned;
	vector <string> words;

	vector <string> parse(const string& s) {
		vector <string> v;
		string temp;
		for (char c : s) {
			c = tolower(c);
			if(isalpha(c)) {
				temp += c;
			}
			else {
				if (temp.size() > 0) {
					v.push_back(temp);
				}
				temp = "";
			}
		}
		if (temp.size() > 0) {
			v.push_back(temp);
		}
		return v;
	}
	vector<string> eraser() {
		vector<string> v = words;
		for (int i = 0; i < v.size(); ++i) {
			if(count(banned.begin(), banned.end(), v[i]) > 0) {
				v.erase(v.begin() + i);
				i--;
			}
		}
		return v;
	}
};

void PrintVector(vector<string> v) {
	for (string& s : v) {
		cout << s << " ";
	}
	cout << endl;
}

int main() {
	string paragraph = "hit hit ball Bob hit a ball, the flew hit ball flew far after it was hit hit.";
	string banned = "hit ball";
	Solution data(paragraph, banned);
	PrintVector(data.GetErased());

	return 0;
}
